<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"
        >

    <bean id="invoker" class="com.epam.democamel.Invoker">
        <property name="producer" ref="producerTemplate"/>
    </bean>

    <bean id="serialization" class="com.epam.democamel.processor.ActiveMQWrapper"/>
    <bean id="listMessageSplitter" class="com.epam.democamel.processor.ListMessageSplitter"/>
    <bean id="listMessageTranslator" class="com.epam.democamel.processor.ListMessageTranslator"/>
    <bean id="studentComparator" class="com.epam.democamel.processor.StudentComparator"/>
    <!--Поднимаем CamelContext -->
    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <!-- Устанавливаем ему producer'a -->
        <camel:template id="producerTemplate"/>
        <!-- Начинается этап маршрутизации -->
        <route>
            <!-- Секция откуда. В Producer'e мы сюда ложим все наши сообщения. Более подробно о direct на сайте Camel в разделе Components-->
            <from uri="direct:start"/>
            <choice>
                <!-- Смотрим заголовок Task -->
                <when>
                    <!-- Если заголовок равен test2, то посылаем сообщение в очередь. -->
                    <simple>${headers.Task} == 'test2'</simple>
                    <!-- URI для ActiveMQ в формате uri="[component]:[type]:[name]"-->
                    <to uri="activemq:topic:Topic"/>
                </when>
                <when>
                    <simple>${headers.Task} == 'test6'</simple>
                    <!-- Pattern Aggregation -->
                    <!-- CompletionSize - количество сообщений для аггрегирования -->
                    <!-- groupExchanges - аттрибут, который говорит о том, что мы хотим группировать сообщения целиком. Сам устанавливает стратегию аггрегирования-->
                    <aggregate completionSize="10" groupExchanges="true">
                        <correlationExpression>
                            <!-- Аггрегируем по Task header'у-->
                            <simple>${headers.Task}</simple>
                        </correlationExpression>
                        <!-- Перед отправкой сериализуем(меняем формат). Шаблон EnvelopWrapper. И указываем processor, который выполнит сериализацию-->
                        <process ref="serialization"/>
                        <to uri="activemq:queue:Queue"/>
                    </aggregate>
                </when>
                <!-- Patterns Message Translator and Sort-->
                <when>
                    <simple>${headers.Task} == 'test8'</simple>
                    <camel:log message="Process message: ${body}" loggingLevel="INFO"
                               logName="com.epam.democamel"/>
                    <transform>
                        <method bean="listMessageTranslator" method="transformList"/>
                    </transform>
                    <sort comparatorRef="studentComparator">
                        <simple>${body}</simple>
                    </sort>
                    <to uri="activemq:queue:TransformQueue"/>
                </when>
                <!-- Patterns Splitter-->
                <when>
                    <simple>${headers.Task} == 'test9'</simple>
                    <split>
                        <method bean="listMessageSplitter" method="splitMessage"/>
                        <to uri="activemq:queue:TransformQueue"/>
                    </split>
                </when>
                <otherwise>
                    <to uri="activemq:queue:Queue"/>
                </otherwise>
            </choice>
        </route>

         <!--This route created using Java DSL in FileRouteBuilder.java -->
        <!--<route id="fileRoute">-->
            <!--<from uri="file:D:/temp/input/?noop=true"/>-->
            <!--<camel:validate>-->
                <!--<camel:simple>${header.Task} == 'test7'</camel:simple>-->
            <!--</camel:validate>-->

            <!--<camel:log message="Test 7 was validated for consumer ${header.Consumer}"/>-->
            <!--<camel:to uri="activemq:queue:FileQueue"/>-->
        <!--</route>-->

    </camelContext>
</beans>